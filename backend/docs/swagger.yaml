openapi: 3.0.0
info:
  version: 1.0.0
  title: Family Movie Database (a.k.a. FaMoBase) v.1.0.0 documentation
  description: Detailed description and usage of the endpoints of the FaMoBase V.1.0.0 film registry webprogram.
servers:
  - url: http://localhost:3000
paths:
  /movies:
    get:
      description: Returns a list of movies that users (family members) have not yet watched.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of movies that users (family members) have not yet watched returned successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Movie"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Creates a new movie
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Movie"
      responses:
        "201":
          description: Entity has been created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movie"
        "400":
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /movies/{_id}:
    get:
      description: Get a watched movie by id
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns a movie
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Movie"
        "404":
          description: Movie with this ID is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      description: Updates a movie
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Movie"
      responses:
        "200":
          description: Movie has been updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movie"
        "400":
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      description: Deletes a movie
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Movie has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        "404":
          description: Movie with this ID is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /watched-movies:
    get:
      description: Returns a list of movies that users (family members) have already watched.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of movies that users (family members) have already watched returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WatchedMovie"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Creates a new watched movie
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WatchedMovie"
      responses:
        "201":
          description: Watched movie has been created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WatchedMovie"
        "400":
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /watched-movies/{_id}:
    get:
      description: Get a watched movie
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns a watched movie
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/WatchedMovie"
        "404":
          description: The watched movie with this ID is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      description: Updates a watched movie
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WatchedMovie"
      responses:
        "200":
          description: Watched movie has been updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WatchedMovie"
        "400":
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      description: Deletes a watched movie
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Watched movie has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        "404":
          description: Watched movie with this ID is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /directors:
    get:
      description: Returns a list of the recorded directors
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of directors returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Director"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Creates a new director
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Director"
      responses:
        "201":
          description: Director has been created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Director"
        "400":
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /directors/{_id}:
    get:
      description: Get a recorded director
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns a director
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Director"
        "404":
          description: Director with this ID is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      description: Updates a director
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Director"
      responses:
        "200":
          description: Director has been updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Director"
        "400":
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      description: Deletes a director
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Director has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        "404":
          description: Director with this ID is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /main-actors:
    get:
      description: Returns a list of the recorded main actors
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of the recorded main actors returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MainActor"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Creates a new main actor
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MainActor"
      responses:
        "201":
          description: Main actor has been created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MainActor"
        "400":
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /main-actors/{_id}:
    get:
      description: Get a recorded main actor
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns a main actor
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/MainActor"
        "404":
          description: Main actor with this ID is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      description: Updates a main actor
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MainActor"
      responses:
        "200":
          description: Main actor has been updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MainActor"
        "400":
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      description: Deletes a main actor
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Main actor has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        "404":
          description: Main actor with this ID is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /family-members:
    get:
      description: Returns a list of the recorded family members and their number of the role.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of family members returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FamilyMember"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Creates a new family member
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FamilyMember"
      responses:
        "201":
          description: Family member has been created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FamilyMember"
        "400":
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /family-members/{_id}:
    get:
      description: Get a family member
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns a family member
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/FamilyMember"
        "404":
          description: Family member with this ID is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      description: Updates a family member
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FamilyMember"
      responses:
        "200":
          description: Family member has been updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FamilyMember"
        "400":
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      description: Deletes a family member
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Family member has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        "404":
          description: Family member with this ID is not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Movie:
      type: object
      required:
        - foreignTitle
        - hungarianTitle
        - director
        - releaseYear
        - lenght
        - genre
        - imdbRank
        - imdbAverage
        - imdbID
        - mainActor1
      properties:
        foreignTitle:
          type: string
        hungarianTitle:
          type: string
        director:
          type: string
        releaseYear:
          type: number
        lenght:
          type: number
        genre:
          type: string
        imdbRank:
          type: number
        imdbAverage:
          type: number
        imdbID:
          type: string
        mainActor1:
          type: string
    WatchedMovie:
      type: object
      required:
        - foreignTitle
        - hungarianTitle
        - director
        - releaseYear
        - lenght
        - genre
        - imdbRank
        - imdbAverage
        - imdbID
        - mainActor1
        - timestampOfWatching
      properties:
        foreignTitle:
          type: string
        hungarianTitle:
          type: string
        director:
          type: string
        releaseYear:
          type: number
        lenght:
          type: number
        genre:
          type: string
        imdbRank:
          type: number
        imdbAverage:
          type: number
        imdbID:
          type: string
        mainActor1:
          type: string
        timestampOfWatching:
          type: string
    Director:
      type: object
      required:
        - fullName
        - nationality
        - dateOfBirth
        - mostFamousMovie
      properties:
        fullName:
          type: string
        nationality:
          type: string
        dateOfBirth:
          type: string
        mostFamousMovie:
          type: string
    MainActor:
      type: object
      required:
        - fullName
        - nationality
        - dateOfBirth
        - mostFamousMovie
      properties:
        fullName:
          type: string
        nationality:
          type: string
        dateOfBirth:
          type: string
        mostFamousMovie:
          type: string
    FamilyMember:
      type: object
      required:
        - first_name
        - last_name
        - email
        - role
        - password
        - nickname
        - favouriteGenre
        - favouriteMovie
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        role:
          type: number
        password:
          type: string
        nickname:
          type: string
        favouriteGenre:
          type: string
        favouriteMovie:
          type: string
    Error:
      type: object
      required:
        - message
        - has_error
      properties:
        message:
          type: string
        has_error:
          type: boolean
